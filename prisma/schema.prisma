// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextsearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url=env("DATABASE_URL")
//  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
 // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String  @id @default(uuid())
  name String
  username  String? @unique
  email     String  @unique
  emailVerified DateTime?
  password  String?
  image String?
  bio       String?
  verified  DateTime?
  accounts Account[]
  posts    Post[]
  likes Like[]
  bookmarks Bookmarks[]
  comments Comments[]
  followers Follow[] @relation("Followers")
  following Follow[] @relation("Following")
  profileComplete Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}

// model Session {
//   id String @id 
//   userId String
//   expiresAt DateTime
//   User User @relation(fields: [userId],references: [id])
   
//   @@map("sessions")

// }

model Account{
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields:[userId] ,references:[id],onDelete:Cascade)
 @@unique([provider,providerAccountId])
}

model Post{
  id String @id @default(cuid())
  content String
  userId String
  attachments Media[]
  comments Comments[]
  likes Like[]
  bookmarks Bookmarks[]
  createdAt DateTime @default(now())
  user User @relation(fields: [userId],references:[id],onDelete:Cascade)
  
 @@map("posts")


}

model Follow {
 @@unique([followerId,followingId])
  followerId String 
  follower User @relation("Following", fields:[followerId] ,references:[id],onDelete:Cascade)
  followingId String
  following User @relation("Followers",fields:[followingId] ,references:[id],onDelete:Cascade)
  @@map("follows")
}

model Media{
  id      String @id @default(uuid())
  postId  String?
  post    Post? @relation(fields: [postId], references: [id],onDelete:SetNull)
  type    MediaType
  publicId   String //publicId
  createdAt DateTime @default(now())
}
  enum MediaType {
    IMAGE
    VIDEO
  }

  model Like{
    userId String
    user User @relation(fields: [userId],references: [id], onDelete:Cascade)
    postId String
    post Post @relation(fields: [postId],references: [id], onDelete:Cascade)
    @@unique([userId,postId])
    @@map("likes")
  }

  model Bookmarks{
    id String @id @default(cuid())
    userId String
    user User @relation(fields: [userId],references: [id], onDelete:Cascade)
    postId String
    post Post @relation(fields: [postId],references: [id], onDelete:Cascade)
    createdAt DateTime @default(now())
    @@unique([userId,postId])
    @@map("bookmarks")
  }

  model Comments{
    id String @id @default(cuid())
    content String
    postId String 
    post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
    userId String
    user User @relation(fields: [userId],references: [id],onDelete: Cascade)
    createdAt DateTime @default(now()) 
    @@map("comments")

  }